// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  role          Role          @default(user)
  accountStatus AccountStatus @default(active)
  agency        Agency[]
  user          User[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("auth")
}

model Agency {
  id           Int           @id @default(autoincrement())
  auth         Auth          @relation(fields: [authId], references: [id])
  authId       Int
  name         String
  contactNo    String
  profileImg   String
  featured     Boolean       @default(false)
  totalReviews Int           @default(0)
  totalStar    Decimal       @default(0) @db.Decimal(10, 2)
  rating       Decimal       @default(0) @db.Decimal(10, 2)
  location     String
  about        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  plans        Plan[]
  bookings     Bookings[]
  planReviews  PlanReviews[]
  Payouts      Payouts[]

  @@map("agencies")
}

model User {
  id          Int           @id @default(autoincrement())
  auth        Auth          @relation(fields: [authId], references: [id])
  authId      Int
  profileImg  String?
  name        String?
  contactNo   String?
  about       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reviews     Reviews[]
  bookings    Bookings[]
  planReviews PlanReviews[]

  @@map("users")
}

model Plan {
  id             Int           @id @default(autoincrement())
  agency         Agency        @relation(fields: [agencyId], references: [id])
  agencyId       Int
  planName       String
  destination    String
  departureFrom  String
  coverLocations String[]
  price          Decimal       @db.Decimal(10, 2)
  images         String[]
  duration       String
  description    String
  departureTime  DateTime
  meals          String
  events         String[]
  notAllowed     String[]
  deadline       DateTime
  featured       Boolean       @default(false)
  status         PlanStatus    @default(available)
  totalSeats     Int
  totalBooking   Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  bookings       Bookings[]
  planReviews    PlanReviews[]
  Payouts        Payouts[]

  @@map("plan")
}

model Bookings {
  id          Int           @id @default(autoincrement())
  status      BookingStatus @default(pending)
  seats       Int
  totalAmount Decimal       @db.Decimal(10, 2)
  userId      Int
  agencyId    Int
  planId      Int
  agency      Agency        @relation(fields: [agencyId], references: [id])
  plan        Plan          @relation(fields: [planId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  payouts     Payouts[]
  planReviews PlanReviews[]

  @@map("bookings")
}

model Reviews {
  id       Int    @id @default(autoincrement())
  rating   Int
  feedback String
  userId   Int
  user     User   @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model PlanReviews {
  id        Int      @id @default(autoincrement())
  rating    Int
  feedback  String
  userId    Int
  agencyId  Int
  planId    Int
  bookingId Int
  booking   Bookings @relation(fields: [bookingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  agency    Agency   @relation(fields: [agencyId], references: [id])
  plan      Plan     @relation(fields: [planId], references: [id])

  @@map("planReviews")
}

model Payouts {
  id          Int          @id @default(autoincrement())
  status      PayoutStatus @default(pending)
  agencyId    Int
  planId      Int
  bookingId   Int
  totalAmount Decimal      @db.Decimal(10, 2)
  agency      Agency       @relation(fields: [agencyId], references: [id])
  plan        Plan         @relation(fields: [planId], references: [id])
  booking     Bookings     @relation(fields: [bookingId], references: [id])

  @@map("payouts")
}

// enums

enum PayoutStatus {
  pending
  released
  postponded
}

enum BookingStatus {
  canceled
  confirmed
  pending
  rejected
}

enum Role {
  admin
  user
  super_admin
  agency
}

enum PlanStatus {
  available
  closed
  canceled
  suspended
}

enum AccountStatus {
  active
  deleted
  suspended
}
